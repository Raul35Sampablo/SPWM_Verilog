// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/31/2023 21:33:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          multiplicacion
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplicacion_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [13:0] cont_in_dec;
reg [13:0] cont_in_inc;
reg [10:0] digito2_1;
reg [10:0] digito2_2;
// wires                                               
wire [10:0] result_1_2;
wire [10:0] result_2_2;

// assign statements (if any)                          
multiplicacion i1 (
// port map - connection between master ports and signals/registers   
	.cont_in_dec(cont_in_dec),
	.cont_in_inc(cont_in_inc),
	.digito2_1(digito2_1),
	.digito2_2(digito2_2),
	.result_1_2(result_1_2),
	.result_2_2(result_2_2)
);
initial 
begin 
#1000000 $finish;
end 
// cont_in_dec[ 13 ]
initial
begin
	cont_in_dec[13] = 1'b0;
end 
// cont_in_dec[ 12 ]
initial
begin
	cont_in_dec[12] = 1'b0;
end 
// cont_in_dec[ 11 ]
initial
begin
	cont_in_dec[11] = 1'b0;
end 
// cont_in_dec[ 10 ]
initial
begin
	cont_in_dec[10] = 1'b0;
end 
// cont_in_dec[ 9 ]
initial
begin
	cont_in_dec[9] = 1'b0;
end 
// cont_in_dec[ 8 ]
initial
begin
	cont_in_dec[8] = 1'b0;
end 
// cont_in_dec[ 7 ]
initial
begin
	cont_in_dec[7] = 1'b0;
end 
// cont_in_dec[ 6 ]
initial
begin
	cont_in_dec[6] = 1'b0;
end 
// cont_in_dec[ 5 ]
initial
begin
	cont_in_dec[5] = 1'b0;
end 
// cont_in_dec[ 4 ]
initial
begin
	cont_in_dec[4] = 1'b1;
end 
// cont_in_dec[ 3 ]
initial
begin
	cont_in_dec[3] = 1'b1;
end 
// cont_in_dec[ 2 ]
initial
begin
	cont_in_dec[2] = 1'b1;
end 
// cont_in_dec[ 1 ]
initial
begin
	cont_in_dec[1] = 1'b1;
end 
// cont_in_dec[ 0 ]
initial
begin
	cont_in_dec[0] = 1'b0;
end 
// cont_in_inc[ 13 ]
initial
begin
	cont_in_inc[13] = 1'b0;
end 
// cont_in_inc[ 12 ]
initial
begin
	cont_in_inc[12] = 1'b0;
end 
// cont_in_inc[ 11 ]
initial
begin
	cont_in_inc[11] = 1'b0;
end 
// cont_in_inc[ 10 ]
initial
begin
	cont_in_inc[10] = 1'b0;
end 
// cont_in_inc[ 9 ]
initial
begin
	cont_in_inc[9] = 1'b0;
end 
// cont_in_inc[ 8 ]
initial
begin
	cont_in_inc[8] = 1'b0;
end 
// cont_in_inc[ 7 ]
initial
begin
	cont_in_inc[7] = 1'b0;
end 
// cont_in_inc[ 6 ]
initial
begin
	cont_in_inc[6] = 1'b0;
end 
// cont_in_inc[ 5 ]
initial
begin
	cont_in_inc[5] = 1'b0;
end 
// cont_in_inc[ 4 ]
initial
begin
	cont_in_inc[4] = 1'b0;
end 
// cont_in_inc[ 3 ]
initial
begin
	cont_in_inc[3] = 1'b0;
end 
// cont_in_inc[ 2 ]
initial
begin
	cont_in_inc[2] = 1'b0;
end 
// cont_in_inc[ 1 ]
initial
begin
	cont_in_inc[1] = 1'b1;
end 
// cont_in_inc[ 0 ]
initial
begin
	cont_in_inc[0] = 1'b1;
end 
// digito2_1[ 10 ]
initial
begin
	digito2_1[10] = 1'b0;
end 
// digito2_1[ 9 ]
initial
begin
	digito2_1[9] = 1'b0;
end 
// digito2_1[ 8 ]
initial
begin
	digito2_1[8] = 1'b0;
end 
// digito2_1[ 7 ]
initial
begin
	digito2_1[7] = 1'b0;
end 
// digito2_1[ 6 ]
initial
begin
	digito2_1[6] = 1'b0;
end 
// digito2_1[ 5 ]
initial
begin
	digito2_1[5] = 1'b0;
end 
// digito2_1[ 4 ]
initial
begin
	digito2_1[4] = 1'b1;
end 
// digito2_1[ 3 ]
initial
begin
	digito2_1[3] = 1'b1;
end 
// digito2_1[ 2 ]
initial
begin
	digito2_1[2] = 1'b1;
end 
// digito2_1[ 1 ]
initial
begin
	digito2_1[1] = 1'b1;
end 
// digito2_1[ 0 ]
initial
begin
	digito2_1[0] = 1'b0;
end 
// digito2_2[ 10 ]
initial
begin
	digito2_2[10] = 1'b0;
end 
// digito2_2[ 9 ]
initial
begin
	digito2_2[9] = 1'b0;
end 
// digito2_2[ 8 ]
initial
begin
	digito2_2[8] = 1'b0;
end 
// digito2_2[ 7 ]
initial
begin
	digito2_2[7] = 1'b0;
end 
// digito2_2[ 6 ]
initial
begin
	digito2_2[6] = 1'b0;
end 
// digito2_2[ 5 ]
initial
begin
	digito2_2[5] = 1'b0;
end 
// digito2_2[ 4 ]
initial
begin
	digito2_2[4] = 1'b0;
end 
// digito2_2[ 3 ]
initial
begin
	digito2_2[3] = 1'b0;
end 
// digito2_2[ 2 ]
initial
begin
	digito2_2[2] = 1'b1;
end 
// digito2_2[ 1 ]
initial
begin
	digito2_2[1] = 1'b0;
end 
// digito2_2[ 0 ]
initial
begin
	digito2_2[0] = 1'b1;
end 
endmodule

